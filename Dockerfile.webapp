#
# Builder pre-image
#
FROM node:18-buster as builder

# Setup node
RUN apt-get update && \
	  apt-get install -y \
		ca-certificates \
		curl \
		gcc \
		git \
		libc6-dev \
		libcairo-dev \
		libjpeg62-turbo-dev \
		libpango1.0-dev \
		libpixman-1-dev \
		libusb-dev \
		python \
		ssh-client \
		unzip \
		--no-install-recommends && \
	  rm -rf /var/lib/apt/lists/*

# install lerna
RUN npm config set unsafe-perm true && \
    npm install -g lerna && \
    npm config set unsafe-perm false


COPY ./webapp /build
WORKDIR /build
RUN yarn install && yarn dist


#
# Dist image
#
FROM nginx:stable-alpine

COPY --from=builder /build/dist /usr/share/nginx/html
COPY --from=builder /build/config/*.json /etc/

RUN echo $'#!/bin/sh\n\
\n\
if [[ -z "$DIST" ]]; then\n\
  export DIST=dist;\n\
fi\n\
\n\
APP_CONFIG=`cat /etc/webapp.${DIST}.json | tr "\n" " "`\n\
\n\
if [[ -z "${APP_CONFIG}" ]]; then\n\
  echo "config file is empty, exiting.."\n\
  exit 0\n\
fi\n\
\n\
sed -i \'s|\/\*APP_CONFIG>>\*\/{}\/\*<<APP_CONFIG\*\/|\'"$APP_CONFIG"\'|g\' /usr/share/nginx/html/index.html\n\
\n\
if [[ -z "$@" ]]; then\n\
  /usr/sbin/nginx -g "daemon off;"\n\
else\n\
  exec "$@"\n\
fi\n\
'\ > /entrypoint.sh

RUN chmod +x /entrypoint.sh

EXPOSE 80

ENTRYPOINT ["/entrypoint.sh"]

# NOTE: must put try_files below in /etc/nginx/conf.d/default.conf of this container..
#
# location / {
#   root       /usr/share/nginx/html;
#   index      index.html index.htm;
#   try_files  $uri $uri/ /index.html;
# }
