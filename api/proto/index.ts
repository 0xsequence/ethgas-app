/* eslint-disable */
// api v0.2.0 0638150fa21276cf2d63e53c585cc3f4b8390d1f
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.2.0"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "0638150fa21276cf2d63e53c585cc3f4b8390d1f"


//
// Types
//
export interface Version {
  webrpcVersion: string
  schemaVersion: string
  schemaHash: string
  appVersion: string
}

export interface SuggestedGasPrice {
  blockNum: number
  blockTime: number
  instant: number
  fast: number
  standard: number
  slow: number
}

export interface GasStat {
  blockNum: number
  blockTime: number
  max: number
  average: number
  min: number
}

export interface NetworkInfo {
  
  handle: string
  title: string
  token: string
}

export interface ETHGas {
  ping(headers?: object): Promise<PingReturn>
  version(headers?: object): Promise<VersionReturn>
  listNetworks(headers?: object): Promise<ListNetworksReturn>
  suggestedGasPrice(args: SuggestedGasPriceArgs, headers?: object): Promise<SuggestedGasPriceReturn>
  allSuggestedGasPrices(args: AllSuggestedGasPricesArgs, headers?: object): Promise<AllSuggestedGasPricesReturn>
  allGasStats(args: AllGasStatsArgs, headers?: object): Promise<AllGasStatsReturn>
  gasPriceHistory(args: GasPriceHistoryArgs, headers?: object): Promise<GasPriceHistoryReturn>
}

export interface PingArgs {
}

export interface PingReturn {
  ok: boolean  
}
export interface VersionArgs {
}

export interface VersionReturn {
  version: Version  
}
export interface ListNetworksArgs {
}

export interface ListNetworksReturn {
  networks: Array<NetworkInfo>  
}
export interface SuggestedGasPriceArgs {
  network: string
}

export interface SuggestedGasPriceReturn {
  suggestedGasPrice: SuggestedGasPrice  
}
export interface AllSuggestedGasPricesArgs {
  network: string
  count?: number
}

export interface AllSuggestedGasPricesReturn {
  suggestedGasPrices: Array<SuggestedGasPrice>  
}
export interface AllGasStatsArgs {
  network: string
  count?: number
}

export interface AllGasStatsReturn {
  gasStats: Array<GasStat>  
}
export interface GasPriceHistoryArgs {
  network: string
}

export interface GasPriceHistoryReturn {
  gasPriceHistory: {[key: number]: Array<number>}  
}


  
//
// Client
//
export class ETHGas implements ETHGas {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/ETHGas/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          ok: <boolean>(_data.ok)
        }
      })
    })
  }
  
  version = (headers?: object): Promise<VersionReturn> => {
    return this.fetch(
      this.url('Version'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          version: <Version>(_data.version)
        }
      })
    })
  }
  
  listNetworks = (headers?: object): Promise<ListNetworksReturn> => {
    return this.fetch(
      this.url('ListNetworks'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          networks: <Array<NetworkInfo>>(_data.networks)
        }
      })
    })
  }
  
  suggestedGasPrice = (args: SuggestedGasPriceArgs, headers?: object): Promise<SuggestedGasPriceReturn> => {
    return this.fetch(
      this.url('SuggestedGasPrice'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          suggestedGasPrice: <SuggestedGasPrice>(_data.suggestedGasPrice)
        }
      })
    })
  }
  
  allSuggestedGasPrices = (args: AllSuggestedGasPricesArgs, headers?: object): Promise<AllSuggestedGasPricesReturn> => {
    return this.fetch(
      this.url('AllSuggestedGasPrices'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          suggestedGasPrices: <Array<SuggestedGasPrice>>(_data.suggestedGasPrices)
        }
      })
    })
  }
  
  allGasStats = (args: AllGasStatsArgs, headers?: object): Promise<AllGasStatsReturn> => {
    return this.fetch(
      this.url('AllGasStats'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          gasStats: <Array<GasStat>>(_data.gasStats)
        }
      })
    })
  }
  
  gasPriceHistory = (args: GasPriceHistoryArgs, headers?: object): Promise<GasPriceHistoryReturn> => {
    return this.fetch(
      this.url('GasPriceHistory'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          gasPriceHistory: <{[key: number]: Array<number>}>(_data.gasPriceHistory)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
